import {  createSlice, PayloadAction ,  } from '@reduxjs/toolkit';

export interface CounterState {
  value:string,
  showInput: boolean,
  data:Array<string>
}

const initialState: CounterState = {
  showInput: false,
  data: [],
  value:''
};

export const counterSlice = createSlice({
  name: 'counter',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    GET_DATA: (state,action:PayloadAction<Array<string>>) => {
        state.data= action.payload
    },
    SHOW_INPUT: (state,action:PayloadAction<boolean>) => {
      state.showInput = action.payload
    },
    SET_VALUE: (state,action:PayloadAction<string>) => {
      state.value = action.payload
    }
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
});



export const { SHOW_INPUT,GET_DATA ,SET_VALUE} = counterSlice.actions;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.

export default counterSlice.reducer;